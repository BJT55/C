内连接:

mysql> select student.id, student.name, score.student_id,score.score
    -> from student,score
    -> where student.id = score.student_id;

查询每位同学的总成绩:
mysql> select student.id, student.name, score.student_id,sum(score.score)
    -> from student,score
    -> where student.id = score.student_id
    -> group by student.id;

查询每位同学每门课程的分数:
mysql> select student.id, student.name, course.name, score.score
    -> from student, course, score
    -> where student.id = score.student_id
    -> and course.id = score.course_id;


mysql> select * from account;
+------+---------+
| id   | account |
+------+---------+
|    1 |    3000 |
|    2 |    4799 |
|    4 |    6700 |
+------+---------+
mysql> select * from user;
+------+----------+
| id   | name     |
+------+----------+
|    1 | zhangsan |
|    2 | wangwu   |
|    3 | lisi     |
+------+----------+
内连接:[注意:没有where])
查询到的是两张表中同时存在的数据
mysql> select user.name, account.account
    -> from user join account on
    -> user.id = account.id;
+----------+---------+
| name     | account |
+----------+---------+
| zhangsan |    3000 |
| wangwu   |    4799 |
+----------+---------+

左连接:尽可能将左侧的表中数据列出来
mysql> select user.name, account.account
    -> from user left join account on
    -> user.id = account.id;
+----------+---------+
| name     | account |
+----------+---------+
| zhangsan |    3000 |
| wangwu   |    4799 |
| lisi     |    NULL |
+----------+---------+

外连接:同上(略)


全外连接:MySQL不支持...


自连接:
自己和自己的数值比较

查找java成绩比计算机原理成绩高的学生信息:
mysql> select * from score s1, score s2
    -> where s1.student_id = s2.student_id
    -> and s1.course_id = 1 and s2.course_id = 3
    -> and s2.score > s1.score;
+-------+------------+-----------+-------+------------+-----------+
| score | student_id | course_id | score | student_id | course_id |
+-------+------------+-----------+-------+------------+-----------+
|  70.5 |          1 |         1 |  98.5 |          1 |         3 |
|  33.0 |          3 |         1 |  68.0 |          3 |         3 |
+-------+------------+-----------+-------+------------+-----------+


子查询:
1.单行子查询:子查询只返回一条记录
2.多行子查询:子查询返回多条记录

单行子查询:
查询'buxiangbiye'的同班同学:
mysql> select name from student
    -> where classes_id =
    -> ( select classes_id from student where name='buxiangbiye');
+-------------+
| name        |
+-------------+
| likui       |
| puti        |
| baisuzhen   |
| xuxian      |
| buxiangbiye |
+-------------+


多行子查询:
查询'语文'或'英语'的课程的成绩信息:
(写法一)
mysql> select * from score
    -> where course_id in
    -> (select id from course
    -> where name='chinese' or name='english');
+-------+------------+-----------+
| score | student_id | course_id |
+-------+------------+-----------+
|  98.0 |          1 |         6 |
|  72.0 |          4 |         6 |
|  43.0 |          6 |         4 |
|  79.0 |          6 |         6 |
|  92.0 |          7 |         6 |
+-------+------------+-----------+

(写法二)
mysql> select * from score
    -> where exists
    -> (select * from course
    ->  where (name='chinese' or name='english')
    -> and course.id = score.course_id);
+-------+------------+-----------+
| score | student_id | course_id |
+-------+------------+-----------+
|  98.0 |          1 |         6 |
|  72.0 |          4 |         6 |
|  43.0 |          6 |         4 |
|  79.0 |          6 |         6 |
|  92.0 |          7 |         6 |
+-------+------------+-----------+

 ---------------------
|in 和 exists 的区别: |
 ---------------------
in: 效率高,更依赖内存,适用于子查询的结果集合比较小的情况.
exists: 效率比较低,但不依赖内存,适用于外层查询结果集合小,子查询结果集合打的情况.



合并:
mysql> select * from course
    -> where id < 3
    -> union
    -> select * from course
    -> where name='chinese';
+----+---------+
| id | name    |
+----+---------+
|  1 | Java    |
|  2 | wenhua  |
|  4 | chinese |
+----+---------+

----------------------------------------------------------------------------------------------


索引 & 事务:

索引:就是目录,目的就是为了提高查询的效率,但会拖慢增删改的效率~
     大部分的场景中,查询是高频操作,增删改是低频操作


B树:(也可以写作B-树,这里不是'减号')

聚簇索引:构建索引的这个数上的每个节点,不光存了索引列的信息,还存了一整条完整的记录~
非聚簇索引:

索引真正结构: B+树

B+树:
1.子节点里面存的最大值(最小值)是在父节点中出现过得(这样就能让叶子结点包含整个数据的全集);
2.针对叶子结点,按照链表方式连接就会得到一个有序的序列;
3.对于B+树来说,他只在叶子结点存储数据,非叶子结点只包含索引列的信息;

B+树相比较于B树来说,优势比较明显:
1.更高效的处理范围查找;
2.数据都存储在叶子结点上,非叶子结点只包含索引列的信息,所占空间小,可以直接放到内存中.




























